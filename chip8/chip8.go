package chip8
import (
	"io/ioutil"
	"log"
	"fmt"
)
const START_ADDRESS = 0x200
const FONT_SET_START_ADDRESS = 0x50
var FONT_SET = []uint8{
	0xF0, 0x90, 0x90, 0x90, 0xF0,
	0x20, 0x60, 0x20, 0x20, 0x70, 
	0xF0, 0x10, 0xF0, 0x80, 0xF0, 
	0xF0, 0x10, 0xF0, 0x10, 0xF0,
	0x90, 0x90, 0xF0, 0x10, 0x10, 
	0xF0, 0x80, 0xF0, 0x10, 0xF0, 
	0xF0, 0x80, 0xF0, 0x90, 0xF0, 
	0xF0, 0x10, 0x20, 0x40, 0x40, 
	0xF0, 0x90, 0xF0, 0x90, 0xF0,
	0xF0, 0x90, 0xF0, 0x10, 0xF0, 
	0xF0, 0x90, 0xF0, 0x90, 0x90,
	0xE0, 0x90, 0xE0, 0x90, 0xE0, 
	0xF0, 0x80, 0x80, 0x80, 0xF0, 
	0xE0, 0x90, 0x90, 0x90, 0xE0, 
	0xF0, 0x80, 0xF0, 0x80, 0xF0, 
	0xF0, 0x80, 0xF0, 0x80, 0x80  }

type Chip8 struct {
	registers [16]uint8
	indexRegister uint16
	pc uint16 
	memory [4096]uint8
	stack [16]uint16
	sp uint8
	delayTimer uint8
	soundTimer uint8
	keypad [16]uint8
	video [64][32]uint32
	opcode uint16
}

func (ch8 Chip8) LoadROM() {
	data, err := ioutil.ReadFile("roms/ibm_logo.ch8")
	if err != nil {
		log.Fatalf("Failed to read file\n")
	}
	copy(ch8.memory[START_ADDRESS:], data)
}

func NewChip8() *Chip8 {
	ch8 := Chip8{pc:START_ADDRESS}
	copy(ch8.memory[FONT_SET_START_ADDRESS:], FONT_SET)
	return &ch8
}